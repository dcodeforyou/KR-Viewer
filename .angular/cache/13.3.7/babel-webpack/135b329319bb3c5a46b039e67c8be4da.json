{"ast":null,"code":"import { of } from 'rxjs';\nimport { krDetailMockJson, krListMockJson, sortByOptions } from '../mocks/kr-mock';\nimport { StateEnum, stateValues } from '../models/enums.model';\nimport * as i0 from \"@angular/core\";\nexport let KrService = /*#__PURE__*/(() => {\n  class KrService {\n    constructor() {}\n\n    getKRList() {\n      return of(krListMockJson);\n    }\n\n    getSortOptions() {\n      return of(sortByOptions);\n    }\n\n    getSelectedKR(id) {\n      const selectedKR = krDetailMockJson.find(kr => kr.card.id === id);\n      return of(selectedKR);\n    }\n\n    getKeyName(value) {\n      var _a;\n\n      return (_a = Object.entries(StateEnum).find(([key, val]) => val === value)) === null || _a === void 0 ? void 0 : _a[0];\n    }\n\n    updateKrStatus(list) {\n      console.log('HERE');\n      list.forEach(kr => {\n        // this.getSelectedKR(kr.id).pipe(\n        //   map((selectedKR) => {\n        //     const isInvalid = selectedKR?.linkedKrCards.some((card) => card.state < kr.state);\n        //     kr.status = isInvalid ? false : true;\n        //     console.log('STATUSSSS:', kr.status);\n        //   })\n        // )\n        this.getSelectedKR(kr.id).subscribe(selectedKR => {\n          const krEnum = this.getKeyName(kr.state);\n          const krStatus = StateEnum[krEnum];\n          const isInvalid = selectedKR === null || selectedKR === void 0 ? void 0 : selectedKR.linkedKrCards.some(card => {\n            const cardEnum = this.getKeyName(card.state);\n\n            if (krEnum && cardEnum) {\n              const cardStatus = StateEnum[cardEnum];\n              console.log('#######');\n              return stateValues[cardStatus] < stateValues[krStatus];\n            }\n\n            return true;\n          });\n          kr.status = isInvalid ? false : true;\n        });\n      });\n      return of(list);\n    }\n\n  }\n\n  KrService.ɵfac = function KrService_Factory(t) {\n    return new (t || KrService)();\n  };\n\n  KrService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: KrService,\n    factory: KrService.ɵfac,\n    providedIn: 'root'\n  });\n  return KrService;\n})();","map":null,"metadata":{},"sourceType":"module"}