{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport { RepoEnum, StateEnum } from \"../models/enums.model\";\nimport * as KRActions from './kr-page.action';\nimport * as KRAPIActions from './kr-api.action';\nexport const initialState = {\n  krDetailsList: null,\n  list: [],\n  sortByOptions: [],\n  sortBySelectedOption: 1,\n  activeStates: [StateEnum.ALL],\n  loading: false,\n  repoOptions: [],\n  activeRepo: RepoEnum.CORE_UI,\n  activeKRId: '',\n  contentLoaded: false\n};\nexport const KRReducers = createReducer(initialState, on(KRActions.enter, state => Object.assign(Object.assign({}, state), {\n  loading: true\n})), on(KRAPIActions.krDetailsListLoaded, (state, action) => Object.assign(Object.assign({}, state), {\n  krDetailsList: action.detailsList,\n  contentLoaded: true\n})), on(KRActions.getSortByOptionsSuccess, (state, action) => Object.assign(Object.assign({}, state), {\n  sortByOptions: action.options\n})), on(KRActions.getRepoOptionsSuccess, (state, action) => Object.assign(Object.assign({}, state), {\n  repoOptions: action.options\n})), on(KRActions.cardCleared, state => Object.assign(Object.assign({}, state), {\n  activeKRId: '',\n  loading: true\n})), on(KRActions.sortBySelected, (state, action) => Object.assign(Object.assign({}, state), {\n  sortBySelectedOption: action.value\n})), on(KRActions.repoSelected, (state, action) => Object.assign(Object.assign({}, state), {\n  activeRepo: action.selectedRepo,\n  activeKRId: ''\n})), on(KRActions.repoSelected, (state, action) => Object.assign(Object.assign({}, state), {\n  activeRepo: action.selectedRepo,\n  activeKRId: ''\n})), on(KRActions.cardSelectedId, (state, action) => Object.assign(Object.assign({}, state), {\n  activeKRId: action.id\n})), on(KRActions.stateSelected, (state, action) => {\n  // at least one state should be selected\n  if (state.activeStates.length == 1 && state.activeStates[0] == action.selectedState) {\n    return Object.assign({}, state);\n  } // is it active state\n\n\n  const isItActiveState = state.activeStates.some(state => state === action.selectedState); // if yes, remove from store\n\n  if (isItActiveState) {\n    const idx = state.activeStates.indexOf(action.selectedState);\n    const newStates = [...state.activeStates];\n    newStates.splice(idx, 1);\n    return Object.assign(Object.assign({}, state), {\n      activeStates: [...newStates]\n    });\n  } // if not selected\n\n\n  if (!isItActiveState) {\n    // if selected category is All then we need to remove all items and add only all category\n    // if selected category not All remove all if it's active or just add a new item\n    if (action.selectedState === StateEnum.ALL) {\n      return Object.assign(Object.assign({}, state), {\n        activeStates: [StateEnum.ALL]\n      });\n    } else {\n      const isAllActive = state.activeStates.some(state => state === StateEnum.ALL);\n\n      if (isAllActive) {\n        return Object.assign(Object.assign({}, state), {\n          activeStates: [action.selectedState]\n        });\n      }\n\n      return Object.assign(Object.assign({}, state), {\n        activeStates: [...state.activeStates, action.selectedState]\n      });\n    }\n  }\n\n  return Object.assign({}, state);\n}));\nexport function reducer(state, action) {\n  return KRReducers(state, action);\n}","map":null,"metadata":{},"sourceType":"module"}