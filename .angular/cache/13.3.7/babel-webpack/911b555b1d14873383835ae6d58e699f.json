{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { map, mergeMap } from \"rxjs/operators\";\nimport * as KRPageActions from \"./kr-page.action\";\nimport * as KRAPIActions from \"./kr-api.action\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/kr.service\";\nexport let KREffects = /*#__PURE__*/(() => {\n  class KREffects {\n    constructor(actions$, krService) {\n      this.actions$ = actions$;\n      this.krService = krService; // loadKRList$ = createEffect(() => this.actions$.pipe(\n      //         ofType(KRPageActions.enter),\n      //         exhaustMap(() => this.krService.getKRList().pipe(\n      //                 map((list: KRCard[]) => this.krService.updateKrStatus(list).pipe(\n      //                     map((list: any[]) => KRAPIActions.krListLoaded({list}))\n      //                 ))\n      //             ))\n      //     ));\n      // loadKRDetailsList$ = createEffect(() => this.actions$.pipe(\n      //     ofType(KRPageActions.enter),\n      //     mergeMap(() => this.krService.getKRDetailsList().pipe(\n      //         map((data: any) => {\n      //             console.log('API DATA: ', data);\n      //             this.krService.updateKRDetailsList(data.data).pipe(\n      //                 map((data) => {\n      //                     return KRAPIActions.krDetailsListLoaded({detailsList: data})\n      //                 })\n      //             )\n      //             return KRAPIActions.krDetailsListLoaded({detailsList: data.data})\n      //         })\n      //     ))\n      // ))\n\n      this.loadKRDetailsList = createEffect(() => this.actions$.pipe(ofType(KRPageActions.enter), mergeMap(() => this.krService.getKRDetailsList()), mergeMap(data => {\n        console.log('INITIAL DATA: ', data);\n        return this.krService.updateKRDetailsList(data.data).pipe(map(detailsList => KRAPIActions.krDetailsListLoaded({\n          detailsList\n        })));\n      }))); // loadKRList$ = createEffect(() => this.actions$.pipe(\n      //   ofType(KRPageActions.enter),\n      //   mergeMap(() => this.krService.getKRList()),\n      //   mergeMap((list: any[]) => {\n      //         return this.krService.updateKrStatus(list).pipe(\n      //             map((list) => KRAPIActions.krListLoaded({list}))\n      //         )\n      //     }\n      //   )  \n      // ));\n\n      this.loadSortByOptions$ = createEffect(() => this.actions$.pipe(ofType(KRPageActions.getSortByOptions), mergeMap(() => this.krService.getSortOptions().pipe(map(options => KRPageActions.getSortByOptionsSuccess({\n        options\n      }))))));\n      this.loadRepoOptions$ = createEffect(() => this.actions$.pipe(ofType(KRPageActions.getRepoOptions), mergeMap(() => this.krService.getRepoOptions().pipe(map(options => KRPageActions.getRepoOptionsSuccess({\n        options\n      }))))));\n    }\n\n  }\n\n  KREffects.ɵfac = function KREffects_Factory(t) {\n    return new (t || KREffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.KrService));\n  };\n\n  KREffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: KREffects,\n    factory: KREffects.ɵfac\n  });\n  return KREffects;\n})();","map":null,"metadata":{},"sourceType":"module"}